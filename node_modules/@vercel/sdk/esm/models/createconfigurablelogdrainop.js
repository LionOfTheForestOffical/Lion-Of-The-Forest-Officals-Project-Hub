/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The delivery log format
 */
export const DeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
};
export const Sources = {
    Static: "static",
    Lambda: "lambda",
    Build: "build",
    Edge: "edge",
    External: "external",
    Firewall: "firewall",
};
export const Environments = {
    Preview: "preview",
    Production: "production",
};
export const CreateConfigurableLogDrainSources = {
    Build: "build",
    Edge: "edge",
    Lambda: "lambda",
    Static: "static",
    External: "external",
    Firewall: "firewall",
};
export const CreateConfigurableLogDrainEnvironments = {
    Production: "production",
    Preview: "preview",
};
export const CreateConfigurableLogDrainCreatedFrom = {
    SelfServed: "self-served",
    Integration: "integration",
};
export const CreateConfigurableLogDrainDeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
    Syslog: "syslog",
    Protobuf: "protobuf",
};
export const CreateConfigurableLogDrainStatus = {
    Enabled: "enabled",
    Disabled: "disabled",
    Errored: "errored",
};
export const CreateConfigurableLogDrainDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    AccountPlanDowngrade: "account-plan-downgrade",
    DisabledByAdmin: "disabled-by-admin",
};
/** @internal */
export const DeliveryFormat$inboundSchema = z.nativeEnum(DeliveryFormat);
/** @internal */
export const DeliveryFormat$outboundSchema = DeliveryFormat$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeliveryFormat$;
(function (DeliveryFormat$) {
    /** @deprecated use `DeliveryFormat$inboundSchema` instead. */
    DeliveryFormat$.inboundSchema = DeliveryFormat$inboundSchema;
    /** @deprecated use `DeliveryFormat$outboundSchema` instead. */
    DeliveryFormat$.outboundSchema = DeliveryFormat$outboundSchema;
})(DeliveryFormat$ || (DeliveryFormat$ = {}));
/** @internal */
export const Sources$inboundSchema = z
    .nativeEnum(Sources);
/** @internal */
export const Sources$outboundSchema = Sources$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Sources$;
(function (Sources$) {
    /** @deprecated use `Sources$inboundSchema` instead. */
    Sources$.inboundSchema = Sources$inboundSchema;
    /** @deprecated use `Sources$outboundSchema` instead. */
    Sources$.outboundSchema = Sources$outboundSchema;
})(Sources$ || (Sources$ = {}));
/** @internal */
export const Environments$inboundSchema = z.nativeEnum(Environments);
/** @internal */
export const Environments$outboundSchema = Environments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Environments$;
(function (Environments$) {
    /** @deprecated use `Environments$inboundSchema` instead. */
    Environments$.inboundSchema = Environments$inboundSchema;
    /** @deprecated use `Environments$outboundSchema` instead. */
    Environments$.outboundSchema = Environments$outboundSchema;
})(Environments$ || (Environments$ = {}));
/** @internal */
export const CreateConfigurableLogDrainRequestBody$inboundSchema = z.object({
    deliveryFormat: DeliveryFormat$inboundSchema,
    url: z.string(),
    headers: z.record(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    sources: z.array(Sources$inboundSchema),
    environments: z.array(Environments$inboundSchema).optional(),
    secret: z.string().optional(),
    samplingRate: z.number().optional(),
    name: z.string().optional(),
});
/** @internal */
export const CreateConfigurableLogDrainRequestBody$outboundSchema = z.object({
    deliveryFormat: DeliveryFormat$outboundSchema,
    url: z.string(),
    headers: z.record(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    sources: z.array(Sources$outboundSchema),
    environments: z.array(Environments$outboundSchema).optional(),
    secret: z.string().optional(),
    samplingRate: z.number().optional(),
    name: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainRequestBody$;
(function (CreateConfigurableLogDrainRequestBody$) {
    /** @deprecated use `CreateConfigurableLogDrainRequestBody$inboundSchema` instead. */
    CreateConfigurableLogDrainRequestBody$.inboundSchema = CreateConfigurableLogDrainRequestBody$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainRequestBody$outboundSchema` instead. */
    CreateConfigurableLogDrainRequestBody$.outboundSchema = CreateConfigurableLogDrainRequestBody$outboundSchema;
})(CreateConfigurableLogDrainRequestBody$ || (CreateConfigurableLogDrainRequestBody$ = {}));
export function createConfigurableLogDrainRequestBodyToJSON(createConfigurableLogDrainRequestBody) {
    return JSON.stringify(CreateConfigurableLogDrainRequestBody$outboundSchema.parse(createConfigurableLogDrainRequestBody));
}
export function createConfigurableLogDrainRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConfigurableLogDrainRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConfigurableLogDrainRequestBody' from JSON`);
}
/** @internal */
export const CreateConfigurableLogDrainRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateConfigurableLogDrainRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateConfigurableLogDrainRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateConfigurableLogDrainRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainRequest$;
(function (CreateConfigurableLogDrainRequest$) {
    /** @deprecated use `CreateConfigurableLogDrainRequest$inboundSchema` instead. */
    CreateConfigurableLogDrainRequest$.inboundSchema = CreateConfigurableLogDrainRequest$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainRequest$outboundSchema` instead. */
    CreateConfigurableLogDrainRequest$.outboundSchema = CreateConfigurableLogDrainRequest$outboundSchema;
})(CreateConfigurableLogDrainRequest$ || (CreateConfigurableLogDrainRequest$ = {}));
export function createConfigurableLogDrainRequestToJSON(createConfigurableLogDrainRequest) {
    return JSON.stringify(CreateConfigurableLogDrainRequest$outboundSchema.parse(createConfigurableLogDrainRequest));
}
export function createConfigurableLogDrainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConfigurableLogDrainRequest' from JSON`);
}
/** @internal */
export const CreateConfigurableLogDrainSources$inboundSchema = z.nativeEnum(CreateConfigurableLogDrainSources);
/** @internal */
export const CreateConfigurableLogDrainSources$outboundSchema = CreateConfigurableLogDrainSources$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainSources$;
(function (CreateConfigurableLogDrainSources$) {
    /** @deprecated use `CreateConfigurableLogDrainSources$inboundSchema` instead. */
    CreateConfigurableLogDrainSources$.inboundSchema = CreateConfigurableLogDrainSources$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainSources$outboundSchema` instead. */
    CreateConfigurableLogDrainSources$.outboundSchema = CreateConfigurableLogDrainSources$outboundSchema;
})(CreateConfigurableLogDrainSources$ || (CreateConfigurableLogDrainSources$ = {}));
/** @internal */
export const CreateConfigurableLogDrainEnvironments$inboundSchema = z.nativeEnum(CreateConfigurableLogDrainEnvironments);
/** @internal */
export const CreateConfigurableLogDrainEnvironments$outboundSchema = CreateConfigurableLogDrainEnvironments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainEnvironments$;
(function (CreateConfigurableLogDrainEnvironments$) {
    /** @deprecated use `CreateConfigurableLogDrainEnvironments$inboundSchema` instead. */
    CreateConfigurableLogDrainEnvironments$.inboundSchema = CreateConfigurableLogDrainEnvironments$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainEnvironments$outboundSchema` instead. */
    CreateConfigurableLogDrainEnvironments$.outboundSchema = CreateConfigurableLogDrainEnvironments$outboundSchema;
})(CreateConfigurableLogDrainEnvironments$ || (CreateConfigurableLogDrainEnvironments$ = {}));
/** @internal */
export const CreateConfigurableLogDrainCreatedFrom$inboundSchema = z.nativeEnum(CreateConfigurableLogDrainCreatedFrom);
/** @internal */
export const CreateConfigurableLogDrainCreatedFrom$outboundSchema = CreateConfigurableLogDrainCreatedFrom$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainCreatedFrom$;
(function (CreateConfigurableLogDrainCreatedFrom$) {
    /** @deprecated use `CreateConfigurableLogDrainCreatedFrom$inboundSchema` instead. */
    CreateConfigurableLogDrainCreatedFrom$.inboundSchema = CreateConfigurableLogDrainCreatedFrom$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainCreatedFrom$outboundSchema` instead. */
    CreateConfigurableLogDrainCreatedFrom$.outboundSchema = CreateConfigurableLogDrainCreatedFrom$outboundSchema;
})(CreateConfigurableLogDrainCreatedFrom$ || (CreateConfigurableLogDrainCreatedFrom$ = {}));
/** @internal */
export const CreateConfigurableLogDrainDeliveryFormat$inboundSchema = z
    .nativeEnum(CreateConfigurableLogDrainDeliveryFormat);
/** @internal */
export const CreateConfigurableLogDrainDeliveryFormat$outboundSchema = CreateConfigurableLogDrainDeliveryFormat$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainDeliveryFormat$;
(function (CreateConfigurableLogDrainDeliveryFormat$) {
    /** @deprecated use `CreateConfigurableLogDrainDeliveryFormat$inboundSchema` instead. */
    CreateConfigurableLogDrainDeliveryFormat$.inboundSchema = CreateConfigurableLogDrainDeliveryFormat$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainDeliveryFormat$outboundSchema` instead. */
    CreateConfigurableLogDrainDeliveryFormat$.outboundSchema = CreateConfigurableLogDrainDeliveryFormat$outboundSchema;
})(CreateConfigurableLogDrainDeliveryFormat$ || (CreateConfigurableLogDrainDeliveryFormat$ = {}));
/** @internal */
export const CreateConfigurableLogDrainStatus$inboundSchema = z.nativeEnum(CreateConfigurableLogDrainStatus);
/** @internal */
export const CreateConfigurableLogDrainStatus$outboundSchema = CreateConfigurableLogDrainStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainStatus$;
(function (CreateConfigurableLogDrainStatus$) {
    /** @deprecated use `CreateConfigurableLogDrainStatus$inboundSchema` instead. */
    CreateConfigurableLogDrainStatus$.inboundSchema = CreateConfigurableLogDrainStatus$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainStatus$outboundSchema` instead. */
    CreateConfigurableLogDrainStatus$.outboundSchema = CreateConfigurableLogDrainStatus$outboundSchema;
})(CreateConfigurableLogDrainStatus$ || (CreateConfigurableLogDrainStatus$ = {}));
/** @internal */
export const CreateConfigurableLogDrainDisabledReason$inboundSchema = z
    .nativeEnum(CreateConfigurableLogDrainDisabledReason);
/** @internal */
export const CreateConfigurableLogDrainDisabledReason$outboundSchema = CreateConfigurableLogDrainDisabledReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainDisabledReason$;
(function (CreateConfigurableLogDrainDisabledReason$) {
    /** @deprecated use `CreateConfigurableLogDrainDisabledReason$inboundSchema` instead. */
    CreateConfigurableLogDrainDisabledReason$.inboundSchema = CreateConfigurableLogDrainDisabledReason$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainDisabledReason$outboundSchema` instead. */
    CreateConfigurableLogDrainDisabledReason$.outboundSchema = CreateConfigurableLogDrainDisabledReason$outboundSchema;
})(CreateConfigurableLogDrainDisabledReason$ || (CreateConfigurableLogDrainDisabledReason$ = {}));
/** @internal */
export const CreateConfigurableLogDrainResponseBody$inboundSchema = z.object({
    secret: z.string().optional(),
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    sources: z.array(CreateConfigurableLogDrainSources$inboundSchema).optional(),
    environments: z.array(CreateConfigurableLogDrainEnvironments$inboundSchema),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    samplingRate: z.number().optional(),
    hideIpAddresses: z.boolean().optional(),
    id: z.string(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()),
    updatedAt: z.number(),
    url: z.string(),
    headers: z.record(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    name: z.string(),
    teamId: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    createdFrom: CreateConfigurableLogDrainCreatedFrom$inboundSchema.optional(),
    deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$inboundSchema,
    status: CreateConfigurableLogDrainStatus$inboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: CreateConfigurableLogDrainDisabledReason$inboundSchema
        .optional(),
});
/** @internal */
export const CreateConfigurableLogDrainResponseBody$outboundSchema = z.object({
    secret: z.string().optional(),
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    sources: z.array(CreateConfigurableLogDrainSources$outboundSchema).optional(),
    environments: z.array(CreateConfigurableLogDrainEnvironments$outboundSchema),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    samplingRate: z.number().optional(),
    hideIpAddresses: z.boolean().optional(),
    id: z.string(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()),
    updatedAt: z.number(),
    url: z.string(),
    headers: z.record(z.string()).optional(),
    projectIds: z.array(z.string()).optional(),
    name: z.string(),
    teamId: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    createdFrom: CreateConfigurableLogDrainCreatedFrom$outboundSchema.optional(),
    deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$outboundSchema,
    status: CreateConfigurableLogDrainStatus$outboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: CreateConfigurableLogDrainDisabledReason$outboundSchema
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConfigurableLogDrainResponseBody$;
(function (CreateConfigurableLogDrainResponseBody$) {
    /** @deprecated use `CreateConfigurableLogDrainResponseBody$inboundSchema` instead. */
    CreateConfigurableLogDrainResponseBody$.inboundSchema = CreateConfigurableLogDrainResponseBody$inboundSchema;
    /** @deprecated use `CreateConfigurableLogDrainResponseBody$outboundSchema` instead. */
    CreateConfigurableLogDrainResponseBody$.outboundSchema = CreateConfigurableLogDrainResponseBody$outboundSchema;
})(CreateConfigurableLogDrainResponseBody$ || (CreateConfigurableLogDrainResponseBody$ = {}));
export function createConfigurableLogDrainResponseBodyToJSON(createConfigurableLogDrainResponseBody) {
    return JSON.stringify(CreateConfigurableLogDrainResponseBody$outboundSchema.parse(createConfigurableLogDrainResponseBody));
}
export function createConfigurableLogDrainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConfigurableLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConfigurableLogDrainResponseBody' from JSON`);
}
//# sourceMappingURL=createconfigurablelogdrainop.js.map