import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type QueryExperimentationItemsRequest = {
    resourceId?: string | undefined;
};
/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export declare const QueryExperimentationItemsCategory: {
    readonly Experiment: "experiment";
    readonly Flag: "flag";
};
/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export type QueryExperimentationItemsCategory = ClosedEnum<typeof QueryExperimentationItemsCategory>;
export type QueryExperimentationItemsItems = {
    /**
     * The Vercel generated ID for this item Integrations should not receive this in API responses
     */
    id: string;
    slug: string;
    origin: string;
    /**
     * The ID the partner has for this item. Integrations should receive this as `id` in API responses
     */
    externalId: string;
    /**
     * The id of the integration installation on a team
     */
    integrationConfigurationId: string;
    /**
     * The flags collection ID
     */
    resourceId: string;
    /**
     * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
     */
    category?: QueryExperimentationItemsCategory | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isArchived?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};
export type QueryExperimentationItemsResponseBody = {
    items: Array<QueryExperimentationItemsItems>;
};
/** @internal */
export declare const QueryExperimentationItemsRequest$inboundSchema: z.ZodType<QueryExperimentationItemsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryExperimentationItemsRequest$Outbound = {
    resourceId?: string | undefined;
};
/** @internal */
export declare const QueryExperimentationItemsRequest$outboundSchema: z.ZodType<QueryExperimentationItemsRequest$Outbound, z.ZodTypeDef, QueryExperimentationItemsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryExperimentationItemsRequest$ {
    /** @deprecated use `QueryExperimentationItemsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryExperimentationItemsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryExperimentationItemsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryExperimentationItemsRequest$Outbound, z.ZodTypeDef, QueryExperimentationItemsRequest>;
    /** @deprecated use `QueryExperimentationItemsRequest$Outbound` instead. */
    type Outbound = QueryExperimentationItemsRequest$Outbound;
}
export declare function queryExperimentationItemsRequestToJSON(queryExperimentationItemsRequest: QueryExperimentationItemsRequest): string;
export declare function queryExperimentationItemsRequestFromJSON(jsonString: string): SafeParseResult<QueryExperimentationItemsRequest, SDKValidationError>;
/** @internal */
export declare const QueryExperimentationItemsCategory$inboundSchema: z.ZodNativeEnum<typeof QueryExperimentationItemsCategory>;
/** @internal */
export declare const QueryExperimentationItemsCategory$outboundSchema: z.ZodNativeEnum<typeof QueryExperimentationItemsCategory>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryExperimentationItemsCategory$ {
    /** @deprecated use `QueryExperimentationItemsCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Experiment: "experiment";
        readonly Flag: "flag";
    }>;
    /** @deprecated use `QueryExperimentationItemsCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Experiment: "experiment";
        readonly Flag: "flag";
    }>;
}
/** @internal */
export declare const QueryExperimentationItemsItems$inboundSchema: z.ZodType<QueryExperimentationItemsItems, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryExperimentationItemsItems$Outbound = {
    id: string;
    slug: string;
    origin: string;
    externalId: string;
    integrationConfigurationId: string;
    resourceId: string;
    category?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isArchived?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};
/** @internal */
export declare const QueryExperimentationItemsItems$outboundSchema: z.ZodType<QueryExperimentationItemsItems$Outbound, z.ZodTypeDef, QueryExperimentationItemsItems>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryExperimentationItemsItems$ {
    /** @deprecated use `QueryExperimentationItemsItems$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryExperimentationItemsItems, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryExperimentationItemsItems$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryExperimentationItemsItems$Outbound, z.ZodTypeDef, QueryExperimentationItemsItems>;
    /** @deprecated use `QueryExperimentationItemsItems$Outbound` instead. */
    type Outbound = QueryExperimentationItemsItems$Outbound;
}
export declare function queryExperimentationItemsItemsToJSON(queryExperimentationItemsItems: QueryExperimentationItemsItems): string;
export declare function queryExperimentationItemsItemsFromJSON(jsonString: string): SafeParseResult<QueryExperimentationItemsItems, SDKValidationError>;
/** @internal */
export declare const QueryExperimentationItemsResponseBody$inboundSchema: z.ZodType<QueryExperimentationItemsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryExperimentationItemsResponseBody$Outbound = {
    items: Array<QueryExperimentationItemsItems$Outbound>;
};
/** @internal */
export declare const QueryExperimentationItemsResponseBody$outboundSchema: z.ZodType<QueryExperimentationItemsResponseBody$Outbound, z.ZodTypeDef, QueryExperimentationItemsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryExperimentationItemsResponseBody$ {
    /** @deprecated use `QueryExperimentationItemsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryExperimentationItemsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryExperimentationItemsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryExperimentationItemsResponseBody$Outbound, z.ZodTypeDef, QueryExperimentationItemsResponseBody>;
    /** @deprecated use `QueryExperimentationItemsResponseBody$Outbound` instead. */
    type Outbound = QueryExperimentationItemsResponseBody$Outbound;
}
export declare function queryExperimentationItemsResponseBodyToJSON(queryExperimentationItemsResponseBody: QueryExperimentationItemsResponseBody): string;
export declare function queryExperimentationItemsResponseBodyFromJSON(jsonString: string): SafeParseResult<QueryExperimentationItemsResponseBody, SDKValidationError>;
//# sourceMappingURL=queryexperimentationitemsop.d.ts.map