/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export const QueryExperimentationItemsCategory = {
    Experiment: "experiment",
    Flag: "flag",
};
/** @internal */
export const QueryExperimentationItemsRequest$inboundSchema = z.object({
    resourceId: z.string().optional(),
});
/** @internal */
export const QueryExperimentationItemsRequest$outboundSchema = z.object({
    resourceId: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryExperimentationItemsRequest$;
(function (QueryExperimentationItemsRequest$) {
    /** @deprecated use `QueryExperimentationItemsRequest$inboundSchema` instead. */
    QueryExperimentationItemsRequest$.inboundSchema = QueryExperimentationItemsRequest$inboundSchema;
    /** @deprecated use `QueryExperimentationItemsRequest$outboundSchema` instead. */
    QueryExperimentationItemsRequest$.outboundSchema = QueryExperimentationItemsRequest$outboundSchema;
})(QueryExperimentationItemsRequest$ || (QueryExperimentationItemsRequest$ = {}));
export function queryExperimentationItemsRequestToJSON(queryExperimentationItemsRequest) {
    return JSON.stringify(QueryExperimentationItemsRequest$outboundSchema.parse(queryExperimentationItemsRequest));
}
export function queryExperimentationItemsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryExperimentationItemsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryExperimentationItemsRequest' from JSON`);
}
/** @internal */
export const QueryExperimentationItemsCategory$inboundSchema = z.nativeEnum(QueryExperimentationItemsCategory);
/** @internal */
export const QueryExperimentationItemsCategory$outboundSchema = QueryExperimentationItemsCategory$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryExperimentationItemsCategory$;
(function (QueryExperimentationItemsCategory$) {
    /** @deprecated use `QueryExperimentationItemsCategory$inboundSchema` instead. */
    QueryExperimentationItemsCategory$.inboundSchema = QueryExperimentationItemsCategory$inboundSchema;
    /** @deprecated use `QueryExperimentationItemsCategory$outboundSchema` instead. */
    QueryExperimentationItemsCategory$.outboundSchema = QueryExperimentationItemsCategory$outboundSchema;
})(QueryExperimentationItemsCategory$ || (QueryExperimentationItemsCategory$ = {}));
/** @internal */
export const QueryExperimentationItemsItems$inboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    origin: z.string(),
    externalId: z.string(),
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    category: QueryExperimentationItemsCategory$inboundSchema.optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    isArchived: z.boolean().optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
});
/** @internal */
export const QueryExperimentationItemsItems$outboundSchema = z.object({
    id: z.string(),
    slug: z.string(),
    origin: z.string(),
    externalId: z.string(),
    integrationConfigurationId: z.string(),
    resourceId: z.string(),
    category: QueryExperimentationItemsCategory$outboundSchema.optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    isArchived: z.boolean().optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryExperimentationItemsItems$;
(function (QueryExperimentationItemsItems$) {
    /** @deprecated use `QueryExperimentationItemsItems$inboundSchema` instead. */
    QueryExperimentationItemsItems$.inboundSchema = QueryExperimentationItemsItems$inboundSchema;
    /** @deprecated use `QueryExperimentationItemsItems$outboundSchema` instead. */
    QueryExperimentationItemsItems$.outboundSchema = QueryExperimentationItemsItems$outboundSchema;
})(QueryExperimentationItemsItems$ || (QueryExperimentationItemsItems$ = {}));
export function queryExperimentationItemsItemsToJSON(queryExperimentationItemsItems) {
    return JSON.stringify(QueryExperimentationItemsItems$outboundSchema.parse(queryExperimentationItemsItems));
}
export function queryExperimentationItemsItemsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryExperimentationItemsItems$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryExperimentationItemsItems' from JSON`);
}
/** @internal */
export const QueryExperimentationItemsResponseBody$inboundSchema = z.object({
    items: z.array(z.lazy(() => QueryExperimentationItemsItems$inboundSchema)),
});
/** @internal */
export const QueryExperimentationItemsResponseBody$outboundSchema = z.object({
    items: z.array(z.lazy(() => QueryExperimentationItemsItems$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryExperimentationItemsResponseBody$;
(function (QueryExperimentationItemsResponseBody$) {
    /** @deprecated use `QueryExperimentationItemsResponseBody$inboundSchema` instead. */
    QueryExperimentationItemsResponseBody$.inboundSchema = QueryExperimentationItemsResponseBody$inboundSchema;
    /** @deprecated use `QueryExperimentationItemsResponseBody$outboundSchema` instead. */
    QueryExperimentationItemsResponseBody$.outboundSchema = QueryExperimentationItemsResponseBody$outboundSchema;
})(QueryExperimentationItemsResponseBody$ || (QueryExperimentationItemsResponseBody$ = {}));
export function queryExperimentationItemsResponseBodyToJSON(queryExperimentationItemsResponseBody) {
    return JSON.stringify(QueryExperimentationItemsResponseBody$outboundSchema.parse(queryExperimentationItemsResponseBody));
}
export function queryExperimentationItemsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryExperimentationItemsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryExperimentationItemsResponseBody' from JSON`);
}
//# sourceMappingURL=queryexperimentationitemsop.js.map